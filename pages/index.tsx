import { NextPage } from "next";
import Page from "../components/Page";
import { BingoCell, IBingoCell } from "../components/bingoCell";
import { useEffect, useState } from "react";
import { ConfettiAnimation } from "../components/OnConfettiLoad";
//import LandingPageTemplate from "../templates/LandingPage/LandingPageTemplate";

function generateNewBingoState() {
  const bingoColumn = ["b", "i", "n", "g", "o"];

  const bingoRow = [1, 2, 3, 4, 5];

  return bingoRow.map((i, rowIndex) => {
    return bingoColumn.map((r, colIndex) => {
      return {
        bingoIndex: [r, i],
        index: [rowIndex, colIndex],
        selected: false,
        value: Math.floor(Math.random() * 40),
      } as IBingoCell;
    });
  });
}

const Index: NextPage = () => {
  const [gameState, setGameState] = useState<IBingoCell[][]>();
  const [won, setWon] = useState(false);

  useEffect(() => {
    setGameState(generateNewBingoState());
  }, []);

  const toggleCell = (cell: IBingoCell) => {
    if (gameState) {
      let copy = [...gameState];
      const [row, col] = cell.index;

      copy[row][col] = { ...cell, selected: !cell.selected };
      setGameState(copy);
      console.log(checkIfWon(gameState));
      setWon(checkIfWon(gameState));
    }
  };

  const checkIfWon = (gameState: IBingoCell[][]) => {
    let winCol = 0;
    let winRow = 0;

    for (let rowIndex = 0; rowIndex < gameState[0].length; rowIndex++) {
      for (let colIndex = 0; colIndex < gameState[0].length; colIndex++) {
        winRow += +gameState[rowIndex][colIndex].selected;
        winCol += +gameState[colIndex][rowIndex].selected;
      }

      if (winRow >= 5 || winCol >= 5) {
        return true;
      }

      winRow = 0;
      winCol = 0;
    }

    return false;
  };

  return (
    <>
      {won && <ConfettiAnimation />}
      <Page title="bingo-demo" description="Generated by Create Next Stack.">
        <div className="">
          <div className="grid grid-cols-5 grid-rows-1 gap-2  mb-8">
            <div className="box flex items-center">B</div>
            <div className="box flex items-center">I</div>
            <div className="box flex items-center">N</div>
            <div className="box flex items-center">G</div>
            <div className="box flex items-center">O</div>
          </div>
          <div className="grid  grid-cols-5 grid-rows-5 gap-2 max-h-fit">
            {gameState &&
              gameState.map((row) => {
                return row.map((cell) => (
                  <BingoCell
                    key={`${cell.bingoIndex}`}
                    n={cell.value}
                    cell={cell}
                    onClick={() => toggleCell(cell)}
                  >
                    <div>{cell.value}</div>
                  </BingoCell>
                ));
              })}
          </div>
        </div>
      </Page>
    </>
  );
};

export default Index;
